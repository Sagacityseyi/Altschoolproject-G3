Tentatively(didn't need to implement)

1. GroupsTable

pk: group
sk: group_id
group_name: String
admin_id: user_id
timestamp: datetime
is_deleted: Bool

2. ChatMembersTable

pk: member
sk: user_user_uuid_chat_id OR group_group_uuid_user_uuid
timestamp: datetime
other_member: user_uuid (for individual chats) OR group_id (for group chats)
is_group: Bool

3. MessageTable 
pk: message
sk: chat_id_random_uuid4() OR group_id_random_uuid4()
is_group: Bool
timestamp: datetime
content: message
is_edited: Bool
sender: user_uuid
status: unread
is_deleted: Bool
group_id: group_uuid (for group chats)




from os import getenv
from boto3.dynamodb.conditions import Key
import boto3
from botocore.exceptions import ClientError
import json
from datetime import datetime, timezone
from uuid import uuid4
from time import time
from utils import db, context as logger, resp
from utils import make_response, query_table_keys, get_user_data

table_name = getenv("CHATS_TABLE")
table = db.Table(table_name)
split_api_endpoint = getenv("API_ENDPOINT").split("wss")[1]
api_endpoint = f'https{split_api_endpoint}/dev'


apigateway = boto3.client(
    "apigatewaymanagementapi",
    endpoint_url=api_endpoint,
)

def lambda_handler(event, _):
    status_code = 500
    resp["error"] = True
    resp["success"] = False
    resp["data"] = None
    logger.info(event)
    try:
# if not event["headers"].get("Authorization"):
#     resp["message"] = "Authorization header is absent"
#     return make_response(status_code, resp)
        
        access_token = event['headers']['Authorization']
        user_data = get_user_data(access_token)
        admin_id = user_data['sub']

        message = json.loads(event['body'])['message']
        group_name = message.get('group_name')
        members = message.get('members', [])

        group_id = f"group_{str(uuid4())}"
        group_metadata = {
            "pk": "group",
            "sk": group_id,
            "group_name": group_name,
            "admin_id": admin_id,
            "timestamp": int(time()),
            "is_deleted": False,
        }
        table.put_item(Item=group_metadata)
        
        # Add members to the group
        for member_id in members:
            member_item = {
                "pk": "member",
                "sk": f"group_{group_id}_user_{member_id}",
                "timestamp": int(time()),
                "other_member": group_id,
                "is_group": True,
            }
            table.put_item(Item=member_item)
        
        resp['data'] = {
            "group_id": group_id,
            "group_name": group_name,
            "admin_id": admin_id,
            "members": members,
        }
        resp['error'] = False
        resp['success'] = True
        resp['message'] = "Group chat created successfully"
        status_code = 200

    except Exception as e:
        logger.error("Something Went Wrong")
        logger.error(e)
        resp['message'] = "Failed to create group chat"
    return make_response(status_code, resp)

def create_members(chat_id:str, users_id:str):
    '''
    creates two objects chat-metadata (identified by the chat_) 
    and member_item: to indicate the members of the chat and makes retrival query easier
    '''
    users = users_id.split('_')
    logger.info({'user_id': users_id})
    all_users = [users[1], users[2]]
    try:
        first_member_item = {
            "pk": "member",
            "sk" : f"user_{users[1]}_{chat_id}",
            "timestamp" :  int(time()),
            "other_member" :  users[2]
            }
        second_member_item = {
            "pk": "member",
            "sk" : f"user_{users[2]}_{chat_id}",
            "timestamp" :  int(time()),
            "other_member" :  users[1]
            }
        
        table.put_item(Item=first_member_item)
        table.put_item(Item=second_member_item)
        logger.info("created members")
    except Exception as e:
        logger.error(e)
        return None
    return "created members"

def create_group(group_name: str, admin_id: str, members: list):
    group_id = f"group_{str(uuid4())}"
    group_metadata = {
        "pk": "group",
        "sk": group_id,
        "group_name": group_name,
        "admin_id": admin_id,
        "timestamp": int(time()),
        "is_deleted": False,
    }
    table.put_item(Item=group_metadata)
    
    # Add members to the group
    for member_id in members:
        member_item = {
            "pk": "member",
            "sk": f"group_{group_id}_user_{member_id}",
            "timestamp": int(time()),
            "other_member": group_id,
            "is_group": True,
        }
        table.put_item(Item=member_item)
    
    return group_id

def get_group_members(group_id: str):
    response = table.query(
        KeyConditionExpression=Key("pk").eq("member") & Key("sk").begins_with(f"group_{group_id}")
    )
    members = [item["sk"].split('_')[-1] for item in response["Items"]]
    return members

def create_messages(chat_id:str, body:dict, is_group: bool = False):
    message_item = {
        "pk": "message",
        "sk" : f"{chat_id}_{str(uuid4())}",
        "is_group": is_group,
        "timestamp" :  int(time()),
        # "timestamp": datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC'),
        "content" :  body['content'],
        "is_edited" :  False,
        "sender" :  body['sender_id'],
        "status" :  "unread",
        "is_deleted" : False,
    }
    if is_group:
        message_item["group_id"] = chat_id
    table.put_item(Item=message_item)
    return "created messages"


def check_if_message_exists(sender_id: str, receiver_id: str):
    sorted_users = sorted([sender_id, receiver_id])
    users_id = f"users_{sorted_users[0]}_{sorted_users[1]}"
    item_keys =  Key('pk').eq("chat") & Key('sk').begins_with(users_id)

    user_object, total_messages = query_table_keys(table, item_keys)
    
    if user_object:
        chat_id = user_object[0].get("chat_id")
        chat_exists = True
    else:
        try:
            chat_id = f"chat_{str(uuid4())}"
            # Create Chat
            chat_metadata = {
                "pk": "chat",
                "sk" : users_id,
                "chat_id": chat_id,
                "is_group": False,
                "timestamp" : int(time()),
                "is_deleted" : False,
                }
            table.put_item(Item=chat_metadata)
            # Create chat members
            create_members(chat_id, users_id)
            chat_exists = False
        except Exception as e:
            logger.error(e)

    return chat_id, chat_exists

